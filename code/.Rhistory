legend.title = element_text(size = 10),
legend.text = element_text(size = 9)
)
p2
## Number of Records by Continent and Kingdom
# Count records by continent and kingdom
continent_kingdom_counts <- data %>%
group_by(continent, kingdom) %>%
summarize(count = n()) %>%
ungroup() %>%
mutate(count_log = log(count)) %>%
arrange(count)
p3 <- ggplot(continent_kingdom_counts %>%
arrange(count),
aes(x = reorder(continent, -count), y = count, fill = kingdom)) +
geom_bar(stat = "identity", position = "stack") +
scale_y_continuous(breaks = seq(0,3500, by=250))+
labs(
title = "Number of Records by Continent and Kingdom",
x = "Continent",
y = "Number of Records",
fill = "Kingdom"
) +
theme_minimal() +
coord_flip() +
scale_fill_brewer(palette = "Set1")
p3
grid.arrange(p3, p2)
p3 <- ggplot(continent_kingdom_counts %>%
arrange(count),
aes(x = reorder(continent, -count), y = count, fill = kingdom)) +
geom_bar(stat = "identity", position = "stack") +
scale_y_continuous(breaks = seq(0,3500, by=250))+
labs(
title = "Panel A",
x = "Continent",
y = "Number of Records",
fill = "Kingdom"
) +
theme_minimal() +
coord_flip() +
scale_fill_brewer(palette = "Set1")
p3
grid.arrange(p3, p2)
# plot
p2 <- ggplot(continent_age_counts, aes(x = reorder(continent, -count), y = count, fill = age_category)) +
geom_bar(stat = "identity", position = "stack") +
labs(
title = "Panel B",
x = "",
y = "Number of Unique Sources",
fill = "Source Age"
) +
theme_minimal() +
scale_y_continuous(breaks = seq(0,1500, by=250))+
coord_flip() +
scale_fill_manual(values = c(
"Less than 5 years old" = "#4CAF50",
"5-20 years old" = "#2196F3",
"Older than 20 years" = "#FFC107"
)) +
theme(
legend.position = "bottom",
legend.title = element_text(size = 10),
legend.text = element_text(size = 9)
)
p2
## Number of Records by Continent and Kingdom
# Count records by continent and kingdom
continent_kingdom_counts <- data %>%
group_by(continent, kingdom) %>%
summarize(count = n()) %>%
ungroup() %>%
mutate(count_log = log(count)) %>%
arrange(count)
p3 <- ggplot(continent_kingdom_counts %>%
arrange(count),
aes(x = reorder(continent, -count), y = count, fill = kingdom)) +
geom_bar(stat = "identity", position = "stack") +
scale_y_continuous(breaks = seq(0,3500, by=250))+
labs(
title = "Panel A",
x = "Continent",
y = "Number of Records",
fill = "Kingdom"
) +
theme_minimal() +
coord_flip() +
scale_fill_brewer(palette = "Set1")
p3
grid.arrange(p3, p2)
library(tidyverse)
library(gridExtra)
library(scales)
load("metadata_clean.RData")
data <- data_clean %>%
filter(continent %in% c("Antarctica", "Europe", "Africa",
"South America", "Asia", "North America") &
!kingdom == "Protozoa")
# Sources plots -----------------------------------------------------------
## Number of unique sources by continent and age
un_sources_years <- data[,c("continent", "source_name", "year")]  %>%
distinct(continent, source_name, year, .keep_all = TRUE)
un_hashes_years <- data[,c("continent", "file_hash","source_name" ,"year")]  %>%
distinct(continent, file_hash, year,source_name, .keep_all = TRUE)
# Get current year
current_year <- year(Sys.Date())
# Create age categories
unique_sources <- un_sources_years %>%
mutate(age_category = case_when(
year >= (current_year - 5) ~ "Less than 5 years old",
year >= (current_year - 20) ~ "5-20 years old",
TRUE ~ "Older than 20 years"
))
# Convert to factor with specific order
unique_sources$age_category <- factor(unique_sources$age_category,
levels = c("Less than 5 years old",
"5-20 years old",
"Older than 20 years"))
# Count sources by continent and age category
continent_age_counts <- unique_sources %>%
group_by(continent, age_category) %>%
summarize(count = n()) %>%
ungroup() %>%
mutate(count_log = log(count))
# plot
p2 <- ggplot(continent_age_counts, aes(x = reorder(continent, -count), y = count, fill = age_category)) +
geom_bar(stat = "identity", position = "stack") +
labs(
title = "B",
x = "",
y = "Number of Unique Sources",
fill = "Source Age"
) +
theme_minimal() +
scale_y_continuous(breaks = seq(0,1500, by=250))+
coord_flip() +
scale_fill_manual(values = c(
"Less than 5 years old" = "#4CAF50",
"5-20 years old" = "#2196F3",
"Older than 20 years" = "#FFC107"
)) +
theme(
legend.position = "bottom",
legend.title = element_text(size = 10),
legend.text = element_text(size = 9)
)
p2
# Records plots -----------------------------------------------------------
## Number of Records by Continent and Kingdom
# Count records by continent and kingdom
continent_kingdom_counts <- data %>%
group_by(continent, kingdom) %>%
summarize(count = n()) %>%
ungroup() %>%
mutate(count_log = log(count)) %>%
arrange(count)
p3 <- ggplot(continent_kingdom_counts %>%
arrange(count),
aes(x = reorder(continent, -count), y = count, fill = kingdom)) +
geom_bar(stat = "identity", position = "stack") +
scale_y_continuous(breaks = seq(0,3500, by=250))+
labs(
title = "A",
x = "Continent",
y = "Number of Records",
fill = "Kingdom"
) +
theme_minimal() +
coord_flip() +
scale_fill_brewer(palette = "Set1")
p3
grid.arrange(p3, p2)
# p4 is a density plot of "year" in data_clean
p4 <- data_clean%>%
filter(is.na(year), year!="?")%>%
ggplot(aes(x = year)) +
geom_density(aes(fill = "#69b4c2"), alpha = 0.5) +
labs(
title = "Density of Records by Year",
x = "Year",
y = "Density"
) +
theme_minimal() +
scale_fill_brewer(palette = "Set1")
p4
# p4 is a density plot of "year" in data_clean
p4 <- data_clean%>%
ggplot(aes(x = year)) +
geom_density(aes(fill = "#69b4c2"), alpha = 0.5) +
labs(
title = "Density of Records by Year",
x = "Year",
y = "Density"
) +
theme_minimal() +
scale_fill_brewer(palette = "Set1")
p4
# p4 is a density plot of "year" in data_clean
p4 <- data_clean%>%
ggplot(aes(x = year)) +
geom_line(aes(fill = "#69b4c2"), alpha = 0.5) +
labs(
title = "Density of Records by Year",
x = "Year",
y = "Density"
) +
theme_minimal() +
scale_fill_brewer(palette = "Set1")
p4
# p4 is a density plot of "year" in data_clean
p4 <- data_clean%>%
ggplot(aes(x = year)) +
geom_line() +
labs(
title = "Density of Records by Year",
x = "Year",
y = "Density"
) +
theme_minimal() +
scale_fill_brewer(palette = "Set1")
p4
# p4 is a density plot of "year" in data_clean
data_clean %>%
filter( price<300 ) %>%
ggplot( aes(x=price)) +
geom_density(fill="#69b3a2", color="#e9ecef", alpha=0.8)
# p4 is a density plot of "year" in data_clean
data_clean %>%
filter( price<300 ) %>%
ggplot( aes(x=year)) +
geom_density(fill="#69b3a2", color="#e9ecef", alpha=0.8)
# p4 is a density plot of "year" in data_clean
data_clean %>%
ggplot( aes(x=year)) +
geom_density(fill="#69b3a2", color="#e9ecef", alpha=0.8)
p4
p4
# p4 is a density plot of "year" in data_clean
data_clean %>%
ggplot( aes(x=year)) +
geom_density(fill="#69b3a2", color="#e9ecef", alpha=0.8)
library(dplyr)
# Approximate coordinates for each continent
continent_coords <- tibble::tibble(
continent = c("Africa", "Asia", "Europe", "North America", "South America", "Oceania", "Antarctica"),
lon = c(21, 100, 10, -100, -60, 135, 0),
lat = c(0, 40, 50, 40, -15, -25, -80)
)
continent_map_data <- continent_age_counts %>%
left_join(continent_coords, by = "continent")
library(ggplot2)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
# Get base world map
world <- ne_countries(scale = "medium", returnclass = "sf")
# Plot
p_map <- ggplot() +
geom_sf(data = world, fill = "gray95", color = "gray70") +
geom_point(
data = continent_map_data,
aes(x = lon, y = lat, size = count, color = age_category),
alpha = 0.8
) +
scale_size(range = c(3, 20)) +
scale_color_manual(values = c(
"Less than 5 years old" = "#4CAF50",
"5-20 years old" = "#2196F3",
"Older than 20 years" = "#FFC107"
)) +
labs(title = "B", color = "Source Age", size = "Unique Sources") +
theme_minimal()
library(rayshader)
# Convert ggplot to 3D
p_map %>%
rayshader::plot_gg(
multicore = TRUE,
width = 8,
height = 6,
scale = 300,
zoom = 0.6,
phi = 30,
theta = 45,
windowsize = c(1000, 800)
)
p_map
# --- Base World Map ---
world <- ne_countries(scale = "medium", returnclass = "sf")
# --- Define Colors ---
category_colors <- c(
"Less than 5 years old" = "#4CAF50",
"5-20 years old" = "#2196F3",
"Older than 20 years" = "#FFC107"
)
# --- Create ggplot with geom_tile (Attempt 1: Using alpha for height) ---
# Map age_category to fill, and scaled count (alpha_val) to alpha
p_map_bars_alpha <- ggplot() +
geom_sf(data = world, fill = "gray95", color = "gray70") +
geom_tile(
data = bar_data,
# Use offset coordinates
aes(x = plot_lon, y = plot_lat,
fill = age_category,   # Color determined by category
alpha = alpha_val,     # Alpha determined by scaled count
width = tile_width,    # Fixed tile size (degrees)
height = tile_height), # Fixed tile size (degrees)
color = "black",          # Add a black outline to tiles
linewidth = 0.2           # Adjust outline thickness if needed
) +
scale_fill_manual(values = category_colors, name = "Source Age") +
# Set alpha scale - legend for this might be confusing as it relates to height
scale_alpha_continuous(range = c(0.1, 1), name = "Relative Count (Height)") +
labs(title = "B: Source Counts per Continent and Age") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5), # Center title
legend.position = "right" # Keep legend for category colors
)
# Get base world map
world <- ne_countries(scale = "medium", returnclass = "sf")
# --- Data Prep for Bars ---
# 1. Define spatial offsets to separate bars within a continent
#    (Adjust magnitude based on map scale and desired separation)
offset_magnitude <- 3.5 # Degrees lon/lat offset
# 2. Define tile size (base of the bars)
#    Should be smaller than the offset * 2 to avoid overlap
tile_width <- offset_magnitude * 1.5
tile_height <- offset_magnitude * 1.5
# 3. Calculate max count for scaling alpha (if using alpha for height)
max_count <- max(continent_map_data$count, na.rm = TRUE)
if (max_count == 0) max_count <- 1 # Avoid division by zero
# 4. Add offset coordinates and scaled count (for alpha)
bar_data <- continent_map_data %>%
# Assign unique offsets per category
mutate(
offset_x = case_when(
age_category == "Less than 5 years old" ~ -offset_magnitude,
age_category == "5-20 years old"        ~ 0,
age_category == "Older than 20 years"   ~ offset_magnitude,
TRUE ~ 0 # Default case if more categories exist
),
offset_y = 0, # Keep bars side-by-side horizontally
plot_lon = lon + offset_x,
plot_lat = lat + offset_y,
# Scale count to ~0.1-1 for alpha aesthetic (avoiding pure 0 alpha)
alpha_val = pmax(0.1, count / max_count)
)
print("Sample data prepared for plotting (bar_data):")
print(head(bar_data))
# --- Base World Map ---
world <- ne_countries(scale = "medium", returnclass = "sf")
# --- Define Colors ---
category_colors <- c(
"Less than 5 years old" = "#4CAF50",
"5-20 years old" = "#2196F3",
"Older than 20 years" = "#FFC107"
)
# --- Create ggplot with geom_tile (Attempt 1: Using alpha for height) ---
# Map age_category to fill, and scaled count (alpha_val) to alpha
p_map_bars_alpha <- ggplot() +
geom_sf(data = world, fill = "gray95", color = "gray70") +
geom_tile(
data = bar_data,
# Use offset coordinates
aes(x = plot_lon, y = plot_lat,
fill = age_category,   # Color determined by category
alpha = alpha_val,     # Alpha determined by scaled count
width = tile_width,    # Fixed tile size (degrees)
height = tile_height), # Fixed tile size (degrees)
color = "black",          # Add a black outline to tiles
linewidth = 0.2           # Adjust outline thickness if needed
) +
scale_fill_manual(values = category_colors, name = "Source Age") +
# Set alpha scale - legend for this might be confusing as it relates to height
scale_alpha_continuous(range = c(0.1, 1), name = "Relative Count (Height)") +
labs(title = "B: Source Counts per Continent and Age") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5), # Center title
legend.position = "right" # Keep legend for category colors
)
# --- Render with rayshader (Attempt 1: Using alpha for height) ---
message("Attempting to render 3D plot using 'alpha' aesthetic for bar height...")
# Close any previous rgl windows
if (rgl::rgl.cur() > 0) { rgl::rgl.close() }
tryCatch({
plot_gg(
p_map_bars_alpha,
multicore = TRUE,
width = 8,
height = 6,
scale = 250,         # Adjust scale for appropriate height extrusion
height_aes = "alpha", # <<< Use alpha value for extrusion height
zoom = 0.6,
phi = 30,
theta = -45,         # Adjusted angle slightly
windowsize = c(1200, 900) # Increased window size
)
rayshader_render_success <- TRUE
message("Render successful using 'alpha' for height.")
message("Bar height is proportional to count (via alpha). Color indicates Age Category.")
message("The 'Relative Count (Height)' legend reflects the alpha scale used for height.")
}, error = function(e) {
message("Error rendering with height_aes = 'alpha': ", e$message)
message("This might indicate 'alpha' isn't fully supported for height extrusion in your rayshader/system setup.")
})
# --- Fallback: Render with rayshader (Attempt 2: Using fill for height) ---
# This will use bar color to show count magnitude, losing the age category color.
if (!rayshader_render_success) {
message("Fallback: Rendering 3D plot using 'fill' aesthetic for bar height...")
message("Bar color will now represent count magnitude, not age category.")
# Need a different ggplot where fill is mapped to count
p_map_bars_fill <- ggplot() +
geom_sf(data = world, fill = "gray95", color = "gray70") +
geom_tile(
data = bar_data, # Use the same data with offsets
aes(x = plot_lon, y = plot_lat,
fill = count,        # <<< Fill determined by count
width = tile_width,
height = tile_height),
color = "black",
linewidth = 0.2,
alpha = 0.9 # Use a fixed alpha for visibility
) +
# Use a continuous color scale for the count
scale_fill_viridis_c(option = "C", name = "Source Count (Height)") +
labs(title = "B: Source Counts per Continent (Color = Count)") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
legend.position = "right"
)
# Optional: view the 2D plot for the fallback
# print(p_map_bars_fill)
# Close any previous rgl windows
if (rgl::rgl.cur() > 0) { rgl::rgl.close() }
tryCatch({
plot_gg(
p_map_bars_fill,
multicore = TRUE,
width = 8,
height = 6,
scale = 250,         # Adjust scale
height_aes = "fill",  # <<< Use fill value for extrusion height
zoom = 0.6,
phi = 30,
theta = -45,
windowsize = c(1200, 900)
)
message("Render successful using 'fill' for height.")
message("Bar height AND color intensity represent the source count.")
message("You may need to manually add annotations or a separate legend to indicate which bar corresponds to which age category based on its position (left, middle, right).")
}, error = function(e) {
message("Error rendering with height_aes = 'fill': ", e$message)
})
}
# --- Create ggplot with geom_tile (Attempt 1: Using alpha for height) ---
# Map age_category to fill, and scaled count (alpha_val) to alpha
p_map_bars_alpha <- ggplot() +
geom_sf(data = world, fill = "gray95", color = "gray70") +
geom_tile(
data = bar_data,
# Use offset coordinates
aes(x = plot_lon, y = plot_lat,
fill = age_category,   # Color determined by category
alpha = alpha_val,     # Alpha determined by scaled count
width = tile_width,    # Fixed tile size (degrees)
height = tile_height), # Fixed tile size (degrees)
color = "black",          # Add a black outline to tiles
linewidth = 0.2           # Adjust outline thickness if needed
) +
scale_fill_manual(values = category_colors, name = "Source Age") +
# Set alpha scale - legend for this might be confusing as it relates to height
scale_alpha_continuous(range = c(0.1, 1), name = "Relative Count (Height)") +
labs(title = "B: Source Counts per Continent and Age") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5), # Center title
legend.position = "right" # Keep legend for category colors
)
# Close any previous rgl windows
if (rgl::rgl.cur() > 0) { rgl::rgl.close() }
rayshader_render_success <- FALSE
# p4 line plot for number of records by year, bins by 5 years, add smoothing
# Count records by year
year_counts<-data_clean%%>
# p4 line plot for number of records by year, bins by 5 years, add smoothing
# Count records by year
year_counts<-data_clean%>%
group by(year) %>%
# p4 line plot for number of records by year, bins by 5 years, add smoothing
# Count records by year
year_counts<-data_clean%>%
group_by(year) %>%
summarize(count = n()) %>%
select(year, count)
View(year_counts)
# p4 line plot for number of records by year, bins by 5 years, add smoothing
p4 <- ggplot(year_counts, aes(x = year, y = count)) +
geom_line(color = "blue") +
geom_point(color = "blue") +
geom_smooth(method = "loess", color = "red", se = FALSE) +
labs(
title = "Number of Records by Year",
x = "Year",
y = "Number of Records"
) +
theme_minimal() +
scale_y_continuous(breaks = seq(0,3500, by=250))+
scale_x_continuous(breaks = seq(2000,2025, by=5))
p4
